import * as sinon from "ts-sinon";
import { APIResponseMessage } from "@application/constants";
import { ICognitoService } from "@infrastructure/aws/cognito/interfaces/cognitoServiceInterface";
import { UserRepository } from "@infrastructure/dataAccess/repositories/userRepository";
import { IContextAwareLogger } from "@infrastructure/logger";
import { User } from "./user";
import { mockUser } from "./userMockData";
import { UsersService } from "./users.service";
import {
  ConfirmSignUpCommandOutput,
  InitiateAuthCommandOutput,
} from "@aws-sdk/client-cognito-identity-provider";
describe("user service", () => {
  let userService: UsersService;
  let cognitoServiceStub: ICognitoService;
  let userRepositoryStub: UserRepository;
  let loggerStub: IContextAwareLogger;
  beforeEach(async () => {
    cognitoServiceStub = sinon.stubInterface<ICognitoService>();
    userRepositoryStub = sinon.stubInterface<UserRepository>();
    loggerStub = sinon.stubInterface<IContextAwareLogger>();

    userService = new UsersService(
      cognitoServiceStub,
      userRepositoryStub,
      loggerStub
    );
  });

  describe("authenticateUser", () => {
    it("should return a valid authentication response", async () => {
      const logInUserInput = { username: "user", password: "Abcd123@" };
      userRepositoryStub.findOne = async (): Promise<User> => {
        return mockUser;
      };

      const loggedInUser: InitiateAuthCommandOutput = {
        AuthenticationResult: {
          IdToken: "id-token",
          AccessToken: "access-token",
          RefreshToken: "refresh-token",
        },
        $metadata: {},
      };
      cognitoServiceStub.auth =
        async (): Promise<InitiateAuthCommandOutput> => {
          return loggedInUser;
        };

      mockUser.refreshTokenHash =
        loggedInUser.AuthenticationResult.RefreshToken;

      userRepositoryStub.saveUser = async (): Promise<User> => {
        return mockUser;
      };

      const result = await userService.authenticateUser(logInUserInput);

      expect(result.id).toEqual(mockUser.id);
      expect(result.email).toEqual(mockUser.email);
      expect(result.isActive).toEqual(mockUser.isActive);
      expect(result.jwtToken).toEqual(
        loggedInUser.AuthenticationResult.IdToken
      );
      expect(result.accessToken).toEqual(
        loggedInUser.AuthenticationResult.AccessToken
      );
    });
    it("should throw an error if user does not exist in the DB", async () => {
      const logInUserInput = {
        username: "non-existent-user",
        password: "password",
      };
      userRepositoryStub.findOne = async (): Promise<User> => {
        return undefined;
      };
      let result;
      try {
        result = await userService.authenticateUser(logInUserInput);
      } catch (error) {
        expect(result.errorMessage).toBe(APIResponseMessage.userNotFound);
      }
    });
    it("should throw an error if user is not active", async () => {
      const logInUserInput = {
        username: "inactive-user",
        password: "password",
      };
      userRepositoryStub.findOne = async (): Promise<User> => {
        mockUser.isActive = false;
        return mockUser;
      };
      let result;
      try {
        result = userService.authenticateUser(logInUserInput);
      } catch (error) {
        expect(result.errorMessage).toBe(
          APIResponseMessage.unActivatedAcccount
        );
      }
    });
    it("should throw an error if password is invalid", async () => {
      const logInUserInput = { username: "user", password: "invalid-password" };
      userRepositoryStub.findOne = async (): Promise<User> => {
        return mockUser;
      };
      let result;
      try {
        result = await userService.authenticateUser(logInUserInput);
      } catch (error) {
        expect(result.erroMessage).rejects.toThrow(
          APIResponseMessage.inValidPassword
        );
      }
    });
    it("should thow an error if there is user isnt logged in", async () => {
      const logInUserInput = { username: "user", password: "Abcd123@" };
      userRepositoryStub.findOne = async (): Promise<User> => {
        return mockUser;
      };
      cognitoServiceStub.auth =
        async (): Promise<InitiateAuthCommandOutput> => {
          return undefined;
        };
      let result;
      //is this code within the catch block correct?
      try {
        result = await userService.authenticateUser(logInUserInput);
      } catch (error) {
        expect(result.erroMessage).rejects.toThrow(
          APIResponseMessage.loginFail(logInUserInput.username)
        );
      }
    });
    it("should update user refresh token", async () => {
      const logInUserInput = { username: "user", password: "Abcd123@" };
      userRepositoryStub.findOne = async (): Promise<User> => {
        return mockUser;
      };
      const loggedInUser: InitiateAuthCommandOutput = {
        AuthenticationResult: {
          IdToken: "id-token",
          AccessToken: "access-token",
          RefreshToken: "refresh-token",
        },
        $metadata: {},
      };
      cognitoServiceStub.auth =
        async (): Promise<InitiateAuthCommandOutput> => {
          return loggedInUser;
        };
      mockUser.refreshTokenHash =
        loggedInUser.AuthenticationResult.RefreshToken;
      userRepositoryStub.saveUser = async (): Promise<User> => {
        return mockUser;
      };
      await userService.authenticateUser(logInUserInput);
      expect(mockUser.refreshTokenHash).toEqual(
        loggedInUser.AuthenticationResult.RefreshToken
      );
    });
  });

  describe("auth", () => {
    it("Should throw an error if a user isnt authenticated", async () => {
      const logInUserInput = { username: "user", password: "Abcd123@" };
      const user: InitiateAuthCommandOutput = {
        AuthenticationResult: {
          IdToken: "id-token",
          AccessToken: "access-token",
          RefreshToken: "refresh-token",
        },
        $metadata: {},
      };
      cognitoServiceStub.auth =
        async (): Promise<InitiateAuthCommandOutput> => {
          return { ...user, AuthenticationResult: undefined };
        };
      let result;
      try {
        result = await userService.auth(logInUserInput);
      } catch (error) {
        expect(result.erroMessage).rejects.toThrow(
          APIResponseMessage.loginFail()
        );
      }
    });

    it("Should return the authenticated user", async () => {
      const logInUserInput = { username: "user", password: "Abcd123@" };
      const user: InitiateAuthCommandOutput = {
        AuthenticationResult: {
          IdToken: "12345",
          AccessToken: "access-token",
          RefreshToken: "refresh-token",
        },
        $metadata: {},
      };
      cognitoServiceStub.auth =
        async (): Promise<InitiateAuthCommandOutput> => {
          return user;
        };
      const result = await userService.auth(logInUserInput);

      expect(result.AuthenticationResult.IdToken).toEqual("12345");
      expect(result.AuthenticationResult).not.toBeUndefined;
    });
  });

  describe("confirmSignUp", () => {
    it("Should throw an error if user isnt confirmed", async () => {
      const username = "Ola";
      const code = "1234";

      cognitoServiceStub.adminConfirmSignUp =
        async (): Promise<ConfirmSignUpCommandOutput> => {
          throw new Error(APIResponseMessage.userConfirmationFail);
        };
      const loggerSpy = jest.spyOn(loggerStub, "error");
      try {
        await expect(userService.confirmSignUp(username, code)).rejects.toThrow(
          APIResponseMessage.userConfirmationFail
        );
      } catch (error) {
        expect(loggerSpy).toHaveBeenCalledTimes(1);
        expect(loggerSpy).toHaveBeenCalledWith(
          APIResponseMessage.userConfirmationFail,
          error
        );
      }
    });

    it("Should confirm user signup", async () => {
      const username = "Ola";
      const code = "1234";

      cognitoServiceStub.adminConfirmSignUp =
        async (): Promise<ConfirmSignUpCommandOutput> => {
          return {
            $metadata: {
              httpStatusCode: 200,
            },
          };
        };
      const result = await userService.confirmSignUp(username, code);
      expect(result).not.toBeUndefined;
    });

    it("Should log error correctly when an error occurs", async () => {
      const username = "Ola";
      const code = "1234";
      const errorMessage = "Cognito service error";

      cognitoServiceStub.adminConfirmSignUp =
        async (): Promise<ConfirmSignUpCommandOutput> => {
          throw new Error(errorMessage);
        };

      const loggerSpy = jest.spyOn(loggerStub, "error");

      try {
        await expect(userService.confirmSignUp(username, code)).rejects.toThrow(
          errorMessage
        );
      } catch (error) {
        expect(loggerSpy).toHaveBeenCalledTimes(1);
        expect(loggerSpy).toHaveBeenCalledWith(errorMessage, error);
      }
    });
  });
});
